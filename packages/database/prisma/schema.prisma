// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int            @id @default(autoincrement())
  name               String
  email              String         @unique
  password           String
  googleId           String?        @unique
  githubId           String?        @unique
  dodoCustomerId     String?        @unique
  cashfreeCustomerId String?        @unique
  subscriptions      Subscription[]
  sessions           Session[]
  zaps               Zap[]
  JobSchedule        JobSchedule[]
  Trigger            Trigger[]
}

model Zap {
  id        String   @id @default(uuid())
  userId    Int
  triggerId String
  createdAt DateTime @default(now()) @db.Date
  trigger   Trigger? //one trigger per zap
  actions   Action[] //many actions per zap
  zapRuns   ZapRun[]
  user      User     @relation(fields: [userId], references: [id])
}

model Trigger {
  id        String           @id @default(uuid())
  zapId     String           @unique
  userId    Int              @default(1)
  triggerId String
  metadata  Json             @default("{}")
  type      AvailableTrigger @relation(fields: [triggerId], references: [id])
  zap       Zap              @relation(fields: [zapId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
}

model Action {
  id           String          @id @default(uuid())
  zapId        String
  zap          Zap             @relation(fields: [zapId], references: [id])
  actionId     String
  metadata     Json            @default("{}")
  type         AvailableAction @relation(fields: [actionId], references: [id])
  sortingOrder Int             @default(0)
}

model AvailableAction {
  id      String   @id @default(uuid())
  name    String
  image   String
  actions Action[]
}

model AvailableTrigger {
  id       String    @id @default(uuid())
  name     String
  image    String
  metadata Json      @default("{}")
  triggers Trigger[]
}

model ZapRun {
  id           String        @id @default(uuid())
  zapId        String
  metadata     Json
  zap          Zap           @relation(fields: [zapId], references: [id])
  zapRunOutbox ZapRunOutbox?
}

model ZapRunOutbox {
  id       String @id @default(uuid())
  zapRunId String @unique
  zapRun   ZapRun @relation(fields: [zapRunId], references: [id])
}

model JobSchedule {
  id        String   @id @default(uuid())
  triggerId String   @unique
  userId    Int
  interval  Int      @default(10) // Hours
  nextRunAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([nextRunAt])
  @@index([userId])
}

model Session {
  id        String   @id @default(uuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model SubscriptionPlan {
  id             String         @id @default(uuid())
  name           String // "Pro", "Enterprise", etc.
  dodoPriceId    String? // dodo Price ID
  cashfreePlanId String? // Cashfree Plan ID
  price          Float
  currency       String         @default("USD")
  interval       String
  features       Json // Stored as JSON array
  active         Boolean        @default(true)
  subscriptions  Subscription[]
  createdAt      DateTime       @default(now())
}

model Subscription {
  id                 String           @id @default(uuid())
  userId             Int
  user               User             @relation(fields: [userId], references: [id])
  plan               SubscriptionPlan @relation(fields: [planId], references: [id])
  planId             String
  status             String // "active", "canceled", "past_due"
  paymentMethod      String // "dodopayments", "cashfree"
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  Payment            Payment[]
}

model Payment {
  id             String       @id @default(uuid())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  amount         Float
  currency       String
  paymentMethod  String // "dodo", "cashfree"
  transactionId  String // Gateway's transaction ID
  status         String // "succeeded", "failed", "pending"
  createdAt      DateTime     @default(now())
}
